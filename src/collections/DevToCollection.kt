package com.learnxinyminutes.kotlin.collections

fun main(args: Array<String>) {


    println("Transforming collections: map")
    /*
Let's continue with a classic when it comes to transforming collections: the map function! (Don‚Äôt be confused! The map function has nothing to do with the Map collection type. You can treat them as two completely different things.)

Just like the forEach function, the map function is of higher order. So, it:

Takes each element from our collection,
applies a function to it, and
creates another collection, containing the return values of those function applications.
The result of the map function doesn‚Äôt have to be the same type as the one of our input collection, either.

This makes the map function very versatile ‚Äì whether you want to parse a collection of strings into a collection of integers, or resolve a list of user names to a list of full user profiles ‚Äì‚Äì if you‚Äôre transforming one collection into another, it‚Äôs probably a good first instinct to think map.
     */

    var fruits = listOf(
        "Apple",
        "Banana",
        "Cherry"
    )
    val stiurf = fruits.map {
        it.reversed()
    }
    println(stiurf)

    /*
    However, you might have a transformation inside your map function where you can‚Äôt generate valid results for all input elements. In this case, we can use the mapNotNull function, and our resulting collection will only contain those function results that evaluated to an actual value. This also ensures that type of our resulting variable is non-nullable.
     */
    val strs = listOf(
        "1",
        "2",
        "three",
        "4",
        "V"
    )

    // –ö–æ–º–±–∏–Ω–∞—Ü–∏—è –¥–≤—É—Ö —Ñ—É–Ω–∫—Ü–∏–π mapNotNull –∏ toIntOrNull –±–µ–∑–æ–ø–∞—Å–Ω–∞ –∏ –∏–∑–±–∞–≤–ª—è–µ—Ç –æ—Ç –Ω–µ–≤–µ—Ä–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    val nums: List<Int> = strs.mapNotNull {
        it.toIntOrNull()
    }

    println(nums)

    val rank = listOf(
        "Gold",
        "Silver",
        "Bronze"
    )

    // If we need to keep track of the index of the element which we‚Äôre currently transforming, we can use the mapIndexed function.
    val ranking = rank.mapIndexed { idx, m ->
        "$m ($idx)"
    }

    println(ranking)

    println("Filtering collections: filter and partition")
    /*
    –ü—Ä–µ–¥–∏–∫–∞—Ç - —ç—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª–æ–≥–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: true –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –¥–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–µ–¥–∏–∫–∞—Ç—É, false –æ–∑–Ω–∞—á–∞–µ—Ç –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–µ. –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —ç—Ç–æ—Ç –ø—Ä–µ–¥–∏–∫–∞—Ç –¥–µ–π—Å—Ç–≤—É–µ—Ç –∫–∞–∫ ¬´—à–≤–µ–π—Ü–∞—Ä¬ª - –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∏—Å—Ç–∏–Ω–Ω–æ, —ç–ª–µ–º–µ–Ω—Ç –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –æ–Ω –æ—Ç–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è.
     */

    val people = listOf(
        PersonZ("Joe", 15),
        PersonZ("Agatha", 25),
        PersonZ("Amber", 19),
        Cyborg("Rob")
    )

    val discoVisitors = people.filter {
        it.age >= 18
    }

    println(discoVisitors)

    // If you‚Äôre testing a negative condition, you can use the filterNot function instead, which behaves identically, but inverts the condition.
    val students = people.filterNot {
        it.age >= 18
    }

    println(students)

    // By using partition, we combine the powers of filter and filterNot. It returns a pair of lists, where the first list contains all the elements for which the predicate holds true, and the second contains all the elements that fail the test
    val (adults, children) = people.partition {
        it.age >= 18
    }

    println(adults)
    println(children)

    // If you‚Äôre bringing a collection of nullable items to the party, you can use the filterNotNull function which, as you may have guessed, automatically discards any elements that are null, and gives you a new collection with an adjusted, non-nullable type accordingly.
    val peopleZ = listOf(
        PersonZ("Joe", 15),
        null,
        PersonZ("Agatha", 25),
        null,
        PersonZ("Amber", 19),
        Cyborg("Rob"),
        null,
    )

    val actualPeople = peopleZ.filterNotNull()

    println(actualPeople)

    // Speaking of adjusting types ‚Äì if your collection contains multiple elements from a type hierarchy, but you‚Äôre only interested in elements of a specific type, you can use filterIsInstance, and specify the desired type as a generic parameter.
    val cyborgs = peopleZ.filterIsInstance<Cyborg>()

    println(cyborgs)

    println("Retrieve collection parts: take and drop")


    var objects = listOf("üå±", "üöÄ", "üí°", "üêß", "‚öôÔ∏è")

    val seedlingAndRocket = objects.take(2)

    println(seedlingAndRocket)

    val penguinAndGear = objects.drop(3)

    println(penguinAndGear)

    // And you don‚Äôt have to be afraid to ‚Äúoverdrop‚Äù either ‚Äì dropping more elements from a collection than it contains just gives you an empty list:
    val nothing = objects.drop(8)

    println(nothing)
    println(objects)

    println("Aggregating collections: sums, averages, minimums, maximums, and counting")

    val randomNumbers = listOf(3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 6)

    println(randomNumbers.average())
    println(randomNumbers.sum())

    val randomNames = listOf("Dallas", "Kane", "Ripley", "Lambert")

    // sumOf will use the result of that selector function to add up all our elements.
    val cumulativeLength = randomNames.sumOf { it.length }

    println(cumulativeLength)

    // If we‚Äôre only interested in the greatest or smallest value contained in our collection of numbers, we can use the maxOrNull and minOrNull functions.
    println(randomNumbers.minOrNull())
    println(randomNumbers.maxOrNull())

    // And just like sumBy, we have the sibling functions maxOf and minOf, where we once again pass a selector function, which is going to be used to determine the maximum or minimum of a collection.
    val longestName = randomNames.maxOf { it.length }
    println(longestName)

    val shortestName = randomNames.minOf { it.length }
    println(shortestName)

    val digits = randomNumbers.count()
    println(digits)

    val bigDigits = randomNumbers.count { it > 5 }
    println(bigDigits)

    // There‚Äôs also the powerful joinToString function, which allows us to turn all elements of our collection into a string, complete with a metric ton of customization options like separators, prefixes and postfixes, limits or a placeholder if you have more elements than what your specified limit allows.
    val str = randomNumbers.joinToString (
        separator = "-",
        prefix = "pi://",
        limit = 5
    ) {
        "[$it]"
    }

    println(str)

    println("Checking predicates: any, none and all")

    val friendGroup = listOf(
        PersonD("Jo", 19),
        PersonD("Mic", 15),
        PersonD("Hay", 33, true),
        PersonD("Cal", 25)
    )

    // It returns true if there is at least one element in our collection for which the predicate returns true.
    val groupCanTravel = friendGroup.any { it.driversLicense }
    println(groupCanTravel)

    // Here, we can use the none function, which only returns true when there is not a single element in our collection that holds true for our predicate:
    // –ó–¥–µ—Å—å –º—ã –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é none, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true —Ç–æ–ª—å–∫–æ —Ç–æ–≥–¥–∞, –∫–æ–≥–¥–∞ –≤ –Ω–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞—à–µ–º—É –ø—Ä–µ–¥–∏–∫–∞—Ç—É:
    val groupGetsInClub = friendGroup.none { it.age < 18 }
    println(groupGetsInClub)

    // –≤—Å–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–∏–Ω—É, –µ—Å–ª–∏ –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ –Ω–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞—à–µ–º—É –ø—Ä–µ–¥–∏–∫–∞—Ç—É.
    val groupHasShortNames = friendGroup.all { it.name.length < 4 }
    println(groupHasShortNames)

    println("Predicates for empty collections")

    // How do any, none, and all behave for empty collections?
    val nobody = emptyList<PersonD>()


    println(
        nobody.any { it.driversLicense } // false
    )

    println(
        nobody.none { it.age < 18 } // true
    )

    println(
        nobody.all { it.name.count() < 4 } // true
    )
    // –ù–æ —ç—Ç–æ —Å–¥–µ–ª–∞–Ω–æ –Ω–∞–º–µ—Ä–µ–Ω–Ω–æ –∏ —Ä–∞–∑—É–º–Ω–æ: –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞–∑–≤–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—Ä—É—à–∞–µ—Ç –ø—Ä–µ–¥–∏–∫–∞—Ç. –°–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, –ø—Ä–µ–¥–∏–∫–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏—Å—Ç–∏–Ω–Ω—ã–º –¥–ª—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏, –¥–∞–∂–µ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç!
    // –ü–æ–Ω–∞—á–∞–ª—É —ç—Ç–æ –º–æ–∂–µ—Ç –ø–æ–∫–∞–∑–∞—Ç—å—Å—è –Ω–µ–º–Ω–æ–≥–æ —É—Ç–æ–º–∏—Ç–µ–ª—å–Ω—ã–º, –Ω–æ –≤—ã –æ–±–Ω–∞—Ä—É–∂–∏—Ç–µ, —á—Ç–æ —ç—Ç–∞ –∫–æ–Ω—Ü–µ–ø—Ü–∏—è, –Ω–∞–∑—ã–≤–∞–µ–º–∞—è –ø—É—Å—Ç–æ–π –∏—Å—Ç–∏–Ω–æ–π, –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ —Å–æ—á–µ—Ç–∞–µ—Ç—Å—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —É—Å–ª–æ–≤–∏–π –∏ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ–º –ª–æ–≥–∏–∫–∏ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–º –∫–æ–¥–µ.

    println("Collection parts: chunked and windowed")

    // the chunked function cuts our original collection into lists of lists, where each list has the specified size.
    objects = listOf("üå±", "üöÄ", "üí°", "üêß", "‚öôÔ∏è", "ü§ñ", "üìö")
    println(
        objects.chunked(3)
    )
    // [[üå±, üöÄ, üí°], [üêß, ‚öôÔ∏è, ü§ñ], [üìö]]

    // –ß—Ç–æ–±—ã –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã, –º—ã –º–æ–∂–µ–º –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è. –ù–∞–ø—Ä–∏–º–µ—Ä, –º—ã –º–æ–∂–µ–º –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏—Ö —Å–ø–∏—Å–∫–∞—Ö, –Ω–µ –≤—ã–ø–æ–ª–Ω—è—è –æ—Ç–¥–µ–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ –∫–∞—Ä—Ç—ã:
    println(
        objects.chunked(3) { it.reversed() }
    )
    // [[üí°, üöÄ, üå±], [ü§ñ, ‚öôÔ∏è, üêß], [üìö]]

    // —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç ¬´—Å–∫–æ–ª—å–∑—è—â–µ–µ –æ–∫–Ω–æ¬ª –Ω–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏:
    println(
        objects.windowed(3)
    )
    // [[üå±, üöÄ, üí°], [üöÄ, üí°, üêß], [üí°, üêß, ‚öôÔ∏è], [üêß, ‚öôÔ∏è, ü§ñ], [‚öôÔ∏è, ü§ñ, üìö]]

    // We can change both window and step size, the latter being the number of elements that the window should ‚Äúslide along‚Äù for each step:
    // –ö–∞–∫ –≤—ã –º–æ–∂–µ—Ç–µ –≤–∏–¥–µ—Ç—å –≤ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω–æ–º –≤—ã—à–µ –ø—Ä–∏–º–µ—Ä–µ, –º—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å, –¥–æ–ª–∂–µ–Ω –ª–∏ –Ω–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —á–∞—Å—Ç–∏—á–Ω—ã–µ –æ–∫–Ω–∞. –≠—Ç–æ –º–µ–Ω—è–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –º—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –∫–æ–Ω—Ü–∞ –Ω–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –≤–≤–æ–¥–∞ –∏ —É –Ω–∞—Å –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è —ç–ª–µ–º–µ–Ω—Ç—ã.
    println(
        objects.windowed(4, 2, partialWindows = true)
    )
    // [[üå±, üöÄ, üí°, üêß], [üí°, üêß, ‚öôÔ∏è, ü§ñ], [‚öôÔ∏è, ü§ñ, üìö], [üìö]]

    // windowed also allows us to perform an additional transformation at the end, which can modify the individual windows directly:
    println(
        objects.windowed(4, 2, true) {
        it.reversed()
    })

    println("Un-nesting Collections: Flatten and Flatmap")

    // What if we want to un-nest these, turning them back into flat lists of elements?
    objects = listOf("üå±", "üöÄ", "üí°", "üêß", "‚öôÔ∏è", "ü§ñ", "üìö")
    objects.windowed(4, 2, true) {
        it.reversed()
    }.flatten()

    println(objects)
    // [üêß, üí°, üöÄ, üå±, ü§ñ, ‚öôÔ∏è, üêß, üí°, üìö, ü§ñ, ‚öôÔ∏è, üìö]

    // flatMap is like a combination of first using map, and then using flatten ‚Äì It takes a lambda which generates a collection from each of the elements in our input collection:
    val lettersInNames = listOf("Lou", "Mel", "Cyn").flatMap {
        it.toList()
    }
    println(lettersInNames)
    // [L, o, u, M, e, l, C, y, n]

    // –ï—Å–ª–∏ –≤—ã –≤—ã–ø–æ–ª–Ω—è–µ—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é —Å–æ —Å–ø–∏—Å–∫–æ–º, –∫–æ—Ç–æ—Ä—ã–π, –≤ —Å–≤–æ—é –æ—á–µ—Ä–µ–¥—å, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–ª–ª–µ–∫—Ü–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑ –≤—Ö–æ–¥–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –ø–æ–¥—É–º–∞–π—Ç–µ, –º–æ–∂–µ—Ç –ª–∏ flatMap –ø–æ–º–æ—á—å –≤–∞–º —É–ø—Ä–æ—Å—Ç–∏—Ç—å –≤–∞—à –∫–æ–¥!

    println("Combining collections: zip and unzip")

    val germanCities = listOf(
        "Aachen",
        "Bielefeld",
        "M√ºnchen"
    )

    val germanLicensePlates = listOf(
        "AC",
        "BI",
        "M"
    )

    val citiesToPlates = germanCities.zip(germanLicensePlates)
    // –ö–∞–∫ –≤–∏–¥–∏—Ç–µ, –∑–∞–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–≤ —ç—Ç–∏ –¥–≤–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏, –º—ã –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞—Ä, –≥–¥–µ –∫–∞–∂–¥–∞—è –ø–∞—Ä–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —ç–ª–µ–º–µ–Ω—Ç—ã —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –∏–Ω–¥–µ–∫—Å–æ–º –∏–∑ –¥–≤—É—Ö –∏—Å—Ö–æ–¥–Ω—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π.
    // –û–±—Ä–∞–∑–Ω–æ –≥–æ–≤–æ—Ä—è, —ç—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ –º–æ–ª–Ω–∏—é –Ω–∞ –∫—É—Ä—Ç–∫–µ, –≥–¥–µ –∑—É–±—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç –æ–¥–∏–Ω –∑–∞ –¥—Ä—É–≥–∏–º
    println(citiesToPlates)
    // [(Aachen, AC), (Bielefeld, BI), (M√ºnchen, M)]

    // The standard library also contains the inverse function, called unzip, which takes a list of pairs, and splits them back into a pair of two separate lists:
    val (cities, plates) = citiesToPlates.unzip()

    println(cities)
    // [AACHEN, BIELEFELD, M√úNCHEN]
    println(plates)
    // [ac, bi, m]

    // In a way, zipWithNext is really a specialized case of the windowed function we got to know today: Instead instead of zipping together two separate lists element by element, this function takes one collection, and zips each of its items with the one that follows it:
    var random = listOf(3, 1, 4, 1, 5, 9, 2, 6, 5, 4)
    println(random.zipWithNext())
    // [(3, 1), (1, 4), (4, 1), (1, 5), (5, 9), (9, 2), (2, 6), (6, 5), (5, 4)]

    // –ï—Å–ª–∏ –º—ã —Ö–æ—Ç–∏–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å ¬´–∏–∑–º–µ–Ω–µ–Ω–∏–µ¬ª - –Ω–∞—Å–∫–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –∏–ª–∏ —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è –Ω–∞ –∫–∞–∂–¥–æ–º —à–∞–≥–µ - –º—ã –º–æ–∂–µ–º –¥–æ–≤–æ–ª—å–Ω–æ —ç–ª–µ–≥–∞–Ω—Ç–Ω–æ –≤—ã—Ä–∞–∑–∏—Ç—å —ç—Ç–æ —Å –ø–æ–º–æ—â—å—é zipWithNext. –ú—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –ª—è–º–±–¥—É, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–∞—Ä—É –∏–∑ –æ–¥–Ω–æ–≥–æ —á–∏—Å–ª–∞ –∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å—Ä–∞–∑—É –∑–∞ –Ω–∏–º:
    val changes = random.zipWithNext { a, b -> b - a }
    println(changes)
    // [-2, 3, -3, 4, 4, -7, 4, -1, -1]

    println("Custom aggregations: reduce and fold")

    // In this case, we can rely on the reduce function as a more generic version for aggregating a collection:
    val multiplicativeAggregate = random.reduce { acc, value -> acc * value }
    // acc - An accumulator, which has the same type as our collection, and
    // value - An individual item from our collection.

    println(multiplicativeAggregate) // 129600
    // –ö–∞–∫ –≤–∏–¥–∏—Ç–µ, —Å –ø–æ–º–æ—â—å—é reduce –º—ã –º–æ–∂–µ–º —Å–∫—Ä—ã—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∑–∞ –æ–¥–Ω–∏–º –≤—ã–∑–æ–≤–æ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –≤–µ—Ä–Ω—ã–º–∏ –ª–∞–∫–æ–Ω–∏—á–Ω–æ–º—É —Ö–∞—Ä–∞–∫—Ç–µ—Ä—É Kotlin.

    // –° –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ fold –º—ã –º–æ–∂–µ–º —É–∫–∞–∑–∞—Ç—å –Ω–∞—à —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä - –∏ –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –æ–Ω –º–æ–∂–µ—Ç –¥–∞–∂–µ –∏–º–µ—Ç—å –¥—Ä—É–≥–æ–π —Ç–∏–ø, —á–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –Ω–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –≤–≤–æ–¥–∞!
    // –í –∫–∞—á–µ—Å—Ç–≤–µ –ø—Ä–∏–º–µ—Ä–∞, –º—ã –º–æ–∂–µ–º –≤–∑—è—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –∏ —É–º–Ω–æ–∂–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤–º–µ—Å—Ç–µ, –∏—Å–ø–æ–ª—å–∑—É—è fold:
    fruits = listOf("apple", "cherry", "banana", "orange")
    val multiplied = fruits.fold(1) { acc, value ->
        acc * value.length
    }
    // –ë–∞–∑–æ–≤—ã–π –º–µ—Ö–∞–Ω–∏–∑–º —Ç–æ—Ç –∂–µ - –ª—è–º–±–¥–∞, –ø–µ—Ä–µ–¥–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–∏ —Å–≤–µ—Ä—Ç–∫–∏, –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Å –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–æ–º –∏ –∑–Ω–∞—á–µ–Ω–∏–µ–º –∏ –≤—ã—á–∏—Å–ª—è–µ—Ç –Ω–æ–≤—ã–π –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä.
    // –û—Ç–ª–∏—á–∏–µ –≤ —Ç–æ–º, —á—Ç–æ –º—ã —Å–∞–º–∏ —É–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–∞. "1" —Ç–∞–∫ –∫–∞–∫ —É –Ω–∞—Å —É–º–Ω–æ–∂–µ–Ω–∏–µ.
    println(multiplied) // 1080

    // —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ reduceRight –∏ foldRight –∏–∑–º–µ–Ω—è—é—Ç –ø–æ—Ä—è–¥–æ–∫ –∏—Ç–µ—Ä–∞—Ü–∏–∏
    random = listOf(3, 1, 4, 1, 5, 9, 2, 6, 5, 4)
    val minusAggregate = random.reduceRight{ acc, value -> acc - value }
    println(minusAggregate)

    //reduceOrNull –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –ø—É—Å—Ç—ã–º–∏ –∫–æ–ª–ª–µ–∫—Ü–∏—è–º–∏ –±–µ–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏—Å–∫–ª—é—á–µ–Ω–∏–π.

    var strings = listOf("a", "b", "c", "d") // Returns null if the array is empty.
    println(strings.reduceOrNull { acc, string -> acc + string }) // abcd
    println(strings.reduceIndexedOrNull { index, acc, string -> acc + string + index }) // ab1c2d3

    val randomNull = listOf<Int>() // Returns null if the array is empty.
    val multiplicativeAggregateNull = randomNull.reduceOrNull{ acc, value -> acc * value }
    println(multiplicativeAggregateNull)

    //runningFold –∏ runningReduce –Ω–µ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–µ–µ –∫–æ–Ω–µ—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–∞, –Ω–æ –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ —Ç–∞–∫–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–∞.
    println(strings.runningReduce { acc, string -> acc + string }) // [a, ab, abc, abcd]
    println(strings.runningReduceIndexed { index, acc, string -> acc + string + index }) // [a, ab1, ab1c2, ab1c2d3]

    println(emptyList<String>().runningReduce { _, _ -> "X" }) // []

    println(strings.runningFold("s") { acc, string -> acc + string }) // [s, sa, sab, sabc, sabcd]
    println(strings.runningFoldIndexed("s") { index, acc, string -> acc + string + index }) // [s, sa0, sa0b1, sa0b1c2, sa0b1c2d3]

    println(emptyList<String>().runningFold("s") { _, _ -> "X" }) // [s]
}

data class PersonD(val name: String, val age: Int, val driversLicense: Boolean = false)


open class PersonZ(val name: String, val age: Int) {
    override fun toString() = name
}

class Cyborg(name: String) : PersonZ(name, 99)
