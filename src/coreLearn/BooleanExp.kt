package coreLearn

class BooleanExp: CoreLearn {
    /*
     * Условные выражения представляют некоторое условие, которое возвращает значение типа Boolean: либо true (если условие истинно), либо false (если условие ложно).
     */

    override fun showResult() {
        // Операции отношения
        // > (больше чем): возвращает true, если первый операнд больше второго. Иначе возвращает false

        var a = 11
        var b = 12
        var c : Boolean =  a > b
        println(c)      // false - a меньше чем b

        var d = 35 > 12
        println(d)      // true - 35 больше чем 12

        //< (меньше чем): возвращает true, если первый операнд меньше второго. Иначе возвращает false
        a = 11
        b = 12
        c =  a < b   // true
        d = 35 < 12  // false

        //>= (больше чем или равно): возвращает true, если первый операнд больше или равен второму
        a = 11
        b = 12
        c = a >= b      // false
        d = 11 >= a     // true

        // <= (меньше чем или равно): возвращает true, если первый операнд меньше или равен второму.
        a = 11
        b = 12
        c = a <= b      // true
        d = 11 <= a     // false

        //== (равно): возвращает true, если оба операнда равны. Иначе возвращает false

        a = 11
        b = 12
        c = a == b      // false
        d = b == 12     // true

        // != (не равно): возвращает true, если оба операнда НЕ равны
        a = 11
        b = 12
        c = a != b      // true
        d = b != 12     // false

        // Логические операции
        //Операндами в логических операциях являются два значения типа Boolean. Нередко логические операции объединяют несколько операций отношения:

        // and: возвращает true, если оба операнда равны true.
        var aa: Boolean = true
        var bb: Boolean = false
        var cc: Boolean = aa and bb                         // false
        var dd: Boolean = (11 >= 5) and (9 < 10)     // true
        println(c)
        println(d)

        // or: возвращает true, если хотя бы один из операндов равен true.
        aa = true
        bb = false
        cc = aa or bb                          // true
        dd = (11 < 5) or (9 > 10)     // false

        // xor: возвращает true, если только один из операндов равен true. Если операнды равны возвращается false
        aa = true
        bb = false
        cc = aa xor bb                 // true
        dd = aa xor (90 > 10)      // false

        // !: возвращает true, если операнд равен false. И, наоборот, если операнд равен false, возвращает true.
        aa = true
        bb = !aa  // false
        cc = !bb  // true

        // В качестве альтернативы оператору ! можно использовать метод not():
        aa = true
        bb = aa.not()  // false
        cc = bb.not()  // true

        // in: возвращает true, если операнд имеется в некоторой последовательности.
        // Выражение 1..6 создает последовательность чисел от 1 до 6. И в данном случае оператор in проверяет, есть ли значение переменной a в этой последовательности. Поскольку значение переменной a имеется в данной последовательности, то возвращается true.
        val aaa = 5
        val bbb = aaa in 1..6       // true

    }
}