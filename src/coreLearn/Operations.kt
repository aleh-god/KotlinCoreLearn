package coreLearn

class Operations : CoreLearn {

    override fun showResult()
    {
        var x = 5
        var y = 6
        var z = x + y
        println("Сумма чисел $x и $y равна $z")      // z = 11

        var xx = 65
        var yy = 10
        var zz = x % y  // z = 5
        println("%: возвращает остаток от целочисленного деления чисел $xx и $yy = $zz")

        // ++ (инкремент): увеличивает значение на единицу.
        // -- (декремент): уменьшает значение на единицу.
        // Префиксный инкремент возвращает увеличенное значение:
        // Постфиксный инкремент возвращает значение до увеличения на единицу:

        x = 5
        println("x = $x")
        y = ++x
        println("Префиксный ++инкремент возвращает увеличенное значение: $y")

        x = 5
        y = x++
        println("Постфиксный инкремент++ возвращает значение до увеличения на единицу: $y")

        // Побитовые операторы
        // Ряд операций выполняется над двоичными разрядми числа.
        // Есть следующие побитовые операторы (они применяются только к данным типов Int и Long):

        println("shl: сдвиг битов числа со знаком влево")

        //В данном случае число сдвигается на два разряда влево, поэтому справа число в двоичном виде дополняется двумя нулями. То есть в двоичном виде 3 представляет 11. Сдвигаем на два разряда влево (дополняем справа двумя нулями) и получаем 1100, то есть в десятичной системе число 12.
        var zBit = 3 shl 2     // z = 11 << 2 = 1100
        var dBit = 0b11 shl 2
        println("Двоичное число 11 сдвигается на два разряда влево 11 >> 1100 Результат $zBit и $dBit")          // z = 12


        // shr: сдвиг битов числа со знаком вправо
        // Число 12 сдвигается на два разряда вправо, то есть два числа справа факически отбрасываем и получаем число 11, то есть 3 в десятичой системе.
        zBit = 12 shr 2     // z = 1100 >> 2 = 11
        println(z)          // z = 3
        dBit = 0b1100 shr 2
        println(dBit)          // d = 3
        println("Двоичное число 11 сдвигается на два разряда вправо 1100 >> 11 Результат $zBit и $dBit")          // d = 12


        // ushr: сдвиг битов беззнакового числа вправо
        zBit = 12 ushr 2     // z = 1100 >> 2 = 11
        println("сдвиг битов беззнакового числа вправо $zBit")          // z = 3

        //and: побитовая операция AND (логическое умножение или конъюнкция). Эта операция сравнивает соответствующие разряды двух чисел и возвращает единицу, если эти разряды обоих чисел равны 1. Иначе возвращает 0.
        var xConjunction  = 5   // 101
        var yConjunction= 6   // 110
        var zConjunction = xConjunction and yConjunction     // z = 101 & 110 = 100
        println("побитовая операция AND (логическое умножение или конъюнкция) $zConjunction")          // z = 4

        var dConjunction = 0b101 and 0b110
        println("побитовая операция AND (логическое умножение или конъюнкция) $dConjunction")          // d = 4

        // or: побитовая операция OR (логическое сложение или дизъюнкция). Эта операция сравнивают два соответствуюших разряда обоих чисел и возвращает 1, если хотя бы один разряд равен 1. Если оба разряда равны 0, то возвращается 0.
        xConjunction = 5   // 101
        yConjunction = 6   // 110
        zConjunction = x or y     // z = 101 | 110 = 111
        println("побитовая операция OR (логическое сложение или дизъюнкция) $zConjunction")         // z = 7

        dConjunction = 0b101 or 0b110
        println("побитовая операция OR (логическое сложение или дизъюнкция) $dConjunction")          // d = 7

        // xor: побитовая операция XOR. Сравнивает два разряда и возвращает 1, если один из разрядов равен 1, а другой равен 0. Если оба разряда равны, то возвращается 0.
        xConjunction = 5   // 101
        yConjunction = 6   // 110
        zConjunction = x xor y     // z = 101 ^ 110 = 011
        println("побитовая операция XOR. Сравнивает два разряда $zConjunction")         // z = 3

        dConjunction = 0b101 xor 0b110
        println("побитовая операция XOR. Сравнивает два разряда $dConjunction")          // d = 3

        //inv: логическое отрицание или инверсия - инвертирует биты числа
        var bConjunction = 11  // 1011
        var cConjunction = bConjunction.inv()
        println("inv: логическое отрицание или инверсия $cConjunction")      // -12

    }
}