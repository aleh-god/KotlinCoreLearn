package coreLearn

class ConditionalConstructs: CoreLearn {
    override fun showResult() {

        // Условные конструкции позволяют направить выполнение программы по одному из путей в зависимости от условия.

        //if...else
        //Конструкция if принимает условие, и если это условие истинно, то выполняется последующий блок инструкций.
        var a = 10
        if(a == 10) {
            println("a равно 10")
        }
        else{
            println("a НЕ равно 10")
        }

        // Если необходимо проверить несколько альтернативных вариантов, то можно добавить выражения else if:
        a = 10
        if(a == 10) {
            println("a равно 10")
        }
        else if(a == 9){
            println("a равно 9")
        }
        else if(a == 8){
            println("a равно 8")
        }
        else{
            println("a имеет неопределенное значение")
        }

        // Стоит отметить, что конструкция if может возвращать значение. Например, найдем максимальное из двух чисел:
            a = 10
        var b = 20
        var c = if (a > b) a else b
        println(c)  // 20

        // Если при определении возвращаемого значения надо выполнить еще какие-нибудь действия, то можно заключить эти действия в блоки кода:
        a = 10
        b = 20
        c = if (a > b){
            println("a = $a")
            a
        } else {
            println("b = $b")
            b
        }

        // Конструкция when
        //Конструкция when проверяет значение некоторого объекта и в зависимости от его значения выполняет тот или иной код. Конструкция when аналогична конструкции switch в других языках.
        //После ключевого слова when в скобках идет выражение. Затем идет блок кода, в котором определяются значения для сравнения. После каждого значения после стрелки -> идет последовательность выполняемых инструкций:
        a = 10
        when(a){
            10 -> println("a = 10")
            20 -> println("a = 20")
            else -> println("неопределенное значение")
        }

        //Если надо, чтобы при совпадении значений выполнялось несколько инструкций, то для каждого значения можно определить блок кода:
        a = 10
        when(a){
            10 -> {
                println("a = 10")
                a *= 2
            }
            20 -> {
                println("a = 20")
                a *= 5
            }
            else -> { println("неопределенное значение")}
        }
        println(a)

        //Можно определить одни и те же действия сразу для нескольких значений. В этом случае значения перечисляются через запятую:
        a = 10
        when(a){
            10, 20 -> println("a = 10 или a = 20")
            else -> println("неопределенное значение")
        }

        //Также можно сравнивать с целым диапазоном значений с помощью оператора in:
        a = 10
        when(a){
            in 10..19 -> println("a в диапазоне от 10 до 19")
            in 20..29 -> println("a в диапазоне от 20 до 29")
            //Если оператор in позволяет узнать, есть ли значение в определенном диапазоне, то связка операторов !in позволяет проверить отсутствие значения в определенной последовательности.
            !in 10..20 -> println("a вне диапазона от 10 до 20")
            else -> println("неопределенное значение")
        }

        //Возвращение значения
        //Как и if конструкция when может возвращать значение:
        val sum = 1000
        val rate = when(sum){
            //Таким образом, если значение переменной sum располагается в определенном диапазоне, то возвращается то значение, которое идет после стрелки.
            in 100..999 -> 10
            in 1000..9999 -> 15
            else -> 20
        }
        println(rate)       // 15

        // when может работать с разными типами через object: Any
        fun testWhen(input: Any) {
            when(input) {
                1 -> print("One")
                "Раз" -> print("One")
                is Double -> print("Число $input с запятой")
                else -> print("Нет совпадений")
            }

        }

    }
}