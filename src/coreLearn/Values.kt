package coreLearn

class Values : CoreLearn{

    override fun showResult(){
        /*
         * Переменная представляет именованный участок памяти, который хранит некоторое значение.
         * Каждая переменная характеризуется определенным именем, типом данных и значением.
         * Имя переменной представляет поизвольный идентификатор, который может содержать алфавитно-цифровые символы или символ подчеркивания и должен начинаться либо с алфавитного символа, либо со знака подчеркивания.
         * Для определения переменной можно использовать либо ключевое слово val, либо ключевое слово var
         * С помощью ключевого слова val определяется неизменяемая переменная (immutable variable)
         * Переменная, которая определена с помощью ключевого слова var мы можем многократно менять значения (mutable variable)
         */

        val ageImmutable: Int   // Определение имени, тип данных
        ageImmutable = 23       // Присвоение значения
        // ageImmutable = 25 // Error
        println("Result ageImmutable: "  + ageImmutable)

        var ageVariable: Int = 23
        println("Result ageVariable: " + ageVariable)
        ageVariable = 56
        println("Result ageVariable: $ageVariable")

        /*
         * В отличие от языка Java и ряда других языков Kotlin не имеет встроенных примитивных типов. Все типы представляют определенные классы.
         * Числовые типы
         * Byte: хранит целое число от -128 до 127 и занимает 1 байт
         * Short: хранит целое число от -32768 до 32767 и занимает 2 байта
         * Int: хранит целое число от -2147483648 до 2147483647 и занимает 4 байта
         * Long: хранит целое число от –9 223 372 036 854 775 808 до 9 223 372 036 854 775 807 и занимает 8 байт
         * Float: хранит число с плавающей точкой от -3.4*1038 до 3.4*1038 и занимает 4 байта
         * Double: хранит число с плавающей точкой от ±5.0*10-324 до ±1.7*10308 и занимает 8 байта.
         *
         * Литералы представляют неизменяемые значения (иногда их еще называют константами).
         * Литералы можно передавать переменным в качестве значения. Литералы бывают логическими, целочисленными, вещественными, символьными и строчными.
         */

        // Если же мы хотим явно указать, что число представляет значение типа Long, то следует использовать суффикс L:
        val age: Long = 45L

        val weight: Double = 68.71

        // Если мы хотим указать, что данные будут представлять тип Float, то необходимо использовать суффикс F:
        val weightF: Float = 68.71F

        // Шестнадцатеричная запись числа начинается с 0x, затем идет набор символов от 0 до F, которые представляют число:
        val age0x: Int = 0x0A1    // 161
        println("Шестнадцатеричная запись числа " + age0x)
        // Двоичная запись числа предваряется символами 0b, после которых идет последовательность из нулей и единиц:
        val a0b: Int = 0b0101    // 5
        val b0b: Int = 0b1011     // 11
        println("Двоичная запись числа " + a0b)
        println("Двоичная запись числа " + b0b)

        val boolValue: Boolean = true

        val charValue: Char = 'T'
        /*
         * Также тип Char может представлять специальные последовательности, которые интерпретируются особым образом:
         * \t: табуляция
         * \n: перевод строки
         * \r: возврат каретки
         * \': одинарная кавычка
         * \": двойная кавычка
         * \\: обратный слеш
         */
        val charSpecialValue: Char = '\r'

        // Строка может содержать специальные символы или эскейп-последовательности.
        val text: String = "Первая строка \nВторая строка (разделенная спец-символом)"
        println(text)

        // При создании многострочного текста можно использовать тройные двойные кавычки:
        val text2: String =
            """
Первая строка
        Вторая строка с пробельным отступом в IDE
<--  -->Третья строка
        """
        println(text2)

        // Шаблоны строк (string templates) представляют удобный способ вставки в строку различных значений, в частности, значений переменных.
        val firstName = "Tom"
        val lastName = "Smith"
        val ageUser = 22
        val welcome = "У пользователя $firstName $lastName возраст равен $ageUser"
        println(welcome)

        // Форматирование строк %s
        val format = "This is %s %s".format(firstName, lastName)
        println(format)

        //Тип Any является базовым для всех остальных типов
        var name: Any = "James Bond"
        name = 7

        var simpleFastValue = 5
        // var simpleFastValue     // Ошибка, переменная не инициализирована
        // simpleFastValue = 5     // Компилятор не знает где и как в коде будет использоваться переменная
        // simpleFastValue = "Five" // Ошибка, переменная уже инициализирована по умолчанию
    }
}