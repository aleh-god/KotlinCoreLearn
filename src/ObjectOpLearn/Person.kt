package ObjectOpLearn

// Для определения пакета применяется ключевое слово package, после которого идет имя пакета:
//package account

// Встроенные пакеты

// Kotlin имеет ряд встроенных пакетов, которые подключаюся по умолчанию в любой файл на языке Kotlin:
//kotlin.*
//kotlin.annotation.*
//kotlin.collections.*
//kotlin.comparisons.*
//kotlin.io.*
//kotlin.ranges.*
//kotlin.sequences.*
//kotlin.text.*

class Person constructor(_name: String = "Jesus"){            // Конструктор имеет параметр _name, который представляет тип String
                                                              // Конструктор может иметь значение по умолчанию = "Jesus" для входящих параметров

    // Представлением объекта является класс.
    // Класс фактически представляет определение объекта.
    // А объект является конкретным воплощением класса.

    // Свойства
    var age : Int = 30
    var skills : ArrayList<String> = arrayListOf("Stealth", "SuperJump", "Fly")

    // Конструкторы

    // Для определения конструкторов применяется ключевое слово constructor.
    // Классы в Kotlin могут иметь один первичный конструктор (primary constructor) и один или несколько вторичных конструкторов (secondary constructor).

    // Первичный конструктор является частью заголовка класса и определяется сразу после имени класса:
    // class Person constructor(_name: String)
    // Через параметры конструктора мы можем передать извне данные и использовать их для инициализации объекта.
    // При этом первичный конструктор в отличие от функций не определяет никаких действий, он только может принимать данные извне через параметры.
    // Если первичный конструктор не имеет никаких аннотаций или модификаторов доступа, как в данном случае, то ключевое слово constructor можно опустить:
    // class Person(_name: String) {} - требует инициализатор
    // class Person(val name: String, val age: Int) {} - Первичный конструктор сразу с описанием полей-свойств

    // Инициализатор. Мы можем использовать данные полученные из первичного конструктора для инициализации свойств класса.
    var name : String
    init{
        name = _name
    }

    // Вторичные конструкторы определяются в теле класса.
    // Если для класса определен первичный конструктор, то вторичный конструктор должен вызывать первичный с помощью ключевого слова this:
    constructor(_name: String, _age: Int) : this(_name){        // Через этот вызов необходимо передать значения для параметров первичного конструктора
        age = _age                                              // В самом вторичном конструкторе устанавливается значение свойства age.
    }

    // member functions или функции-члены класса

    fun sayHello() = println("Hello") // Краткая форма. функция в одно действие, нет параметров, возвращает Unit

    fun go(location: String){
        println("$name goes to $location")
    }

    fun getInfo() : String{
        return "Name: $name  Age: $age"
    }





}