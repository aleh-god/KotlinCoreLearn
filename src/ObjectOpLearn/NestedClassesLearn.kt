package ObjectOpLearn

class NestedClassesLearn {

    private var id: Int = 0
    get() = ++field

    // В Kotlin классы могут быть определены в других классах.
    // Такие классы (вложенные классы или nested classes) обычно выполняют какую-то вспомогательную роль,
    // а определение их внутри класса позволяет разместить их как можно ближе к тому месту, где они непосредственно используются.

    class NestedClass{              // По умолчанию вложенные классы имеют модификатор видимости public, то есть они видимы в любой части программы.

        private var nestedId: Int = 0
            get() = ++field

        // Для обращения к вложенному классу надо использовать имя внешнего класса.
        fun changeId() {
            // Стоит учитывать, что вложенный класс по умолчанию не имеет доступа к свойствам и функциям внешнего класса.
            // nestedId = id Unresolved reference Неразрешенная ссылка
            println("nestedId = id // Unresolved reference Неразрешенная ссылка")
        }

        fun call() = println("I am $nestedId in NestedClass")
    }

    // Чтобы вложенный класс мог иметь доступ к свойствам и функциям внешнего класса, необходимо определить вложенный класс с ключевым словом inner.
    // Такой класс еще называют внутренним классом (inner class), чтобы отличать от обычных вложенных классов
    inner class InnerClass{

        private var innerId: Int = 0

        // Если мы хотим использовать объект вложенного класса, то необходимо создать объект внешнего класса:
        fun changeId() {
            innerId = id
        }

        fun call() = println("I am $innerId in InnerClass")

    }
}