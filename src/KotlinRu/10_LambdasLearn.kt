package com.learnxinyminutes.kotlin.KotlinRu.ObjectLearn

fun main(args: Array<String>) {

        // Лямбда - это блок кода, заключенный в фигурные скобки.
        // Если у лямбды есть параметры, то они указываются перед знаком '->' , тело функции начинается после знака ->
        // Последнее выражение в лямбде { } считается возвращаемым значением.
        // Типы параметров в лямбде необязательны, если они могут быть выведены.
        // Ссылки на функции также могут использоваться для вызовов функций высшего порядка.
        // В Kotlin существует соглашение: если последний параметр функции является функцией, то лямбда-выражение,
        // переданное в качестве соответствующего аргумента, может быть заключено в скобки.
        // Когда лямбда-выражение является единственным аргументом функции, круглые скобки могут быть опущены.
        // Если компилятор способен самостоятельно определить сигнатуру, то объявление параметра можно опустить вместе с ->. Параметр будет неявно объявлен под именем it:
        // Если блок кода содержит одну функцию, где it является аргументом, то лямбда-выражение может быть заменено ссылкой на метод (::)

    val items = listOf(1, 2, 3, 4, 5)

    // Лямбда - это блок кода, заключенный в фигурные скобки.
    items.fold(0) {
        // Если у лямбды есть параметры, то они указываются перед знаком '->'
            acc: Int, i: Int ->
        print("acc = $acc, i = $i, ")
        val result = acc + i
        println("result = $result")
        // Последнее выражение в лямбде считается возвращаемым значением:
        result
    }

    // Типы параметров в лямбде необязательны, если они могут быть выведены:
    val joinedToString = items.fold("Elements:", { acc, i -> acc + " " + i })

    // Ссылки на функции также могут использоваться для вызовов функций высшего порядка:
    val product = items.fold(1, Int::times)

    println("joinedToString = $joinedToString")
    println("product = $product")
}